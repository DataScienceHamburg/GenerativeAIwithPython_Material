[
    {
        "page_content": "# **logging howto** _**release 3.13.3**_ ## **guido van rossum and the python development team** **april 27, 2025** **python software foundation** **email: #",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 0
        }
    },
    {
        "page_content": "# **contents** **1** **basic logging tutorial** **2** 1.1 when to use logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 1.2 a simple example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 1.3 logging to a file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 1.4 logging variable data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 1.5 changing the format of displayed messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 1.6 displaying the date/time in messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 1.7 next steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 **2** **advanced logging tutorial** **5",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 0
        }
    },
    {
        "page_content": "**2** **advanced logging tutorial** **5** 2.1 logging flow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 2.2 loggers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 2.3 handlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 2.4 formatters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 2.5 configuring logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 2.6 what happens if no configuration is provided . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 2.7 configuring logging for a library . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 **3** **logging levels** **13** 3.1 custom levels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 **4** **useful handlers** **14** **5**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 0
        }
    },
    {
        "page_content": "**4** **useful handlers** **14** **5** **exceptions raised during logging** **15** **6** **using arbitrary objects as messages** **15** **7** **optimization** **15** **8** **other resources** **16** **index** **17** **author** vinay sajip <vinay_sajip at red-dove dot com> **1**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 0
        }
    },
    {
        "page_content": "this page contains tutorial information. for links to reference information and a logging cookbook, please see _other_ _resources_ . #",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 1
        }
    },
    {
        "page_content": "# **1 basic logging tutorial** logging is a means of tracking events that happen when some software runs. the softwares developer adds logging calls to their code to indicate that certain events have occurred. an event is described by a descriptive message which can optionally contain variable data (i.e. data that is potentially different for each occurrence of the event). events also have an importance which the developer ascribes to the event; the importance can also be called the _level_ or _severity_ . **1.1 when to use logging",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 1
        }
    },
    {
        "page_content": "** you can access logging functionality by creating a logger via logger = getlogger(__name__), and then calling the loggers debug(), info(), warning(), error() and critical() methods. to determine when to use logging, and to see which logger methods to use when, see the table below. it states, for each of a set of common tasks, the best tool to use for that task. the logger methods are named after the level or severity of the events they are used to track. the standard levels and their applicability are described below (in increasing order of severity): |level|when its used| |---|---| |debug<br>info<br>warning<br>error<br>critical|detailed information, typically of interest only when diagnosing problems.<br>confri mation that things are working as expected.<br>an indication that something unexpected happened, or indicative of some problem in the near<br>future (e.g. disk space low). the software is still working as expected.<br>due to a more serious problem, the software has not been",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 1
        }
    },
    {
        "page_content": "software is still working as expected.<br>due to a more serious problem, the software has not been able to perform some function.<br>a serious error, indicating that the program itself may be unable to continue running.| the default level is warning, which means that only events of this severity and higher will be tracked, unless the logging package is configured to do otherwise. events that are tracked can be handled in different ways. the simplest way of handling tracked events is to print them to the console. another common way is to write them to a disk file.",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 1
        }
    },
    {
        "page_content": "**2**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 1
        }
    },
    {
        "page_content": "**1.2 a simple example** a very simple example is: if you type these lines into a script and run it, youll see: warning:root:watch out! printed out on the console. the info message doesnt appear because the default level is warning . the printed message includes the indication of the level and the description of the event provided in the logging call, i.e. watch out!. the actual output can be formatted quite flexibly if you need that; formatting options will also be explained later. notice that in this example, we use functions directly on the logging module, like logging.debug, rather than creating a logger and calling functions on it. these functions operation on the root logger, but can be useful as they will call basicconfig() for you if it has not been called yet, like in this example. in larger programs youll usually want to control the logging configuration explicitly however - so for that reason as well as others, its better to create loggers and call their methods.",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 2
        }
    },
    {
        "page_content": "**1.3 logging to a file",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 2
        }
    },
    {
        "page_content": "** a very common situation is that of recording logging events in a file, so lets look at that next. be sure to try the following in a newly started python interpreter, and dont just continue from the session described above: changed in version 3.9: the _encoding_ argument was added. in earlier python versions, or if not specified, the encoding used is the default value used by open() . while not shown in the above example, an _errors_ argument can also now be passed, which determines how encoding errors are handled. for available values and the default, see the documentation for open() . and now if we open the file and look at what we have, we should find the log messages: this example also shows how you can set the logging level which acts as the threshold for tracking. in this case, because we set the threshold to debug, all of the messages were printed. if you want to set the logging level from a command-line option such as: --log=info and you have the value of the parameter passed",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 2
        }
    },
    {
        "page_content": "level from a command-line option such as: --log=info and you have the value of the parameter passed for --log in some variable _loglevel_, you can use: getattr(logging, loglevel.upper()) to get the value which youll pass to basicconfig() via the _level_ argument. you may want to error check any user input value, perhaps as in the following example:",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 2
        }
    },
    {
        "page_content": "**3**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 2
        }
    },
    {
        "page_content": "the call to basicconfig() should come _before_ any calls to a loggers methods such as debug(), info(), etc. otherwise, that logging event may not be handled in the desired manner. if you run the above script several times, the messages from successive runs are appended to the file _example.log_ . if you want each run to start afresh, not remembering the messages from earlier runs, you can specify the _filemode_ argument, by changing the call in the above example to: logging.basicconfig(filename='example.log', filemode='w', level=logging.debug) the output will be the same as before, but the log file is no longer appended to, so the messages from earlier runs are lost. **1.4 logging variable data",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 3
        }
    },
    {
        "page_content": "**1.4 logging variable data** to log variable data, use a format string for the event description message and append the variable data as arguments. for example: will display: warning:root:look before you leap! as you can see, merging of variable data into the event description message uses the old, %-style of string formatting. this is for backwards compatibility: the logging package pre-dates newer formatting options such as str.format() and string.template . these newer formatting options _are_ supported, but exploring them is outside the scope of this tutorial: see formatting-styles for more information. **1.5 changing the format of displayed messages",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 3
        }
    },
    {
        "page_content": "**1.5 changing the format of displayed messages** to change the format which is used to display messages, you need to specify the format you want to use: which would print: notice that the root which appeared in earlier examples has disappeared. for a full set of things that can appear in format strings, you can refer to the documentation for logrecord-attributes, but for simple usage, you just need the _levelname_ (severity), _message_ (event description, including variable data) and perhaps to display when the event occurred. this is described in the next section. **4**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 3
        }
    },
    {
        "page_content": "**1.6 displaying the date/time in messages** to display the date and time of an event, you would place %(asctime)s in your format string: which should print something like this: 2010-12-12 11:41:42,612 is when this event was logged. the default format for date/time display (shown above) is like iso8601 or **[rfc 3339]( . if you need more control over the formatting of the date/time, provide a _datefmt_ argument to basicconfig, as in this example: which would display something like this: 12/12/2010 11:46:36 am is when this event was logged. the format of the _datefmt_ argument is the same as supported by time.strftime() . **1.7 next steps",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 4
        }
    },
    {
        "page_content": "**1.7 next steps** that concludes the basic tutorial. it should be enough to get you up and running with logging. theres a lot more that the logging package offers, but to get the best out of it, youll need to invest a little more of your time in reading the following sections. if youre ready for that, grab some of your favourite beverage and carry on. if your logging needs are simple, then use the above examples to incorporate logging into your own scripts, and if you run into problems or dont understand something, please post a question on the comp.lang.python usenet group [(available at and you should receive help before too long.]( still here? you can carry on reading the next few sections, which provide a slightly more advanced/in-depth tutorial than the basic one above. after that, you can take a look at the logging-cookbook.",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 4
        }
    },
    {
        "page_content": "#",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 4
        }
    },
    {
        "page_content": "# **2 advanced logging tutorial",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 4
        }
    },
    {
        "page_content": "** the logging library takes a modular approach and offers several categories of components: loggers, handlers, filters, and formatters. - loggers expose the interface that application code directly uses. - handlers send the log records (created by loggers) to the appropriate destination. - filters provide a finer grained facility for determining which log records to output. - formatters specify the layout of log records in the final output. log event information is passed between loggers, handlers, filters and formatters in a logrecord instance. logging is performed by calling methods on instances of the logger class (hereafter called _loggers_ ). each instance has a name, and they are conceptually arranged in a namespace hierarchy using dots (periods) as separators. for example, a logger named scan is the parent of loggers scan.text, scan.html and scan.pdf. logger names can be anything you want, and indicate the area of an application in which a logged message originates. a good",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 4
        }
    },
    {
        "page_content": "you want, and indicate the area of an application in which a logged message originates. a good convention to use when naming loggers is to use a module-level logger, in each module which uses logging, named as follows:",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 4
        }
    },
    {
        "page_content": "**5**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 4
        }
    },
    {
        "page_content": "logger = logging.getlogger(__name__) this means that logger names track the package/module hierarchy, and its intuitively obvious where events are logged just from the logger name. the root of the hierarchy of loggers is called the root logger. thats the logger used by the functions debug(), info(), warning(), error() and critical(), which just call the same-named method of the root logger. the functions and the methods have the same signatures. the root loggers name is printed as root in the logged output. it is, of course, possible to log messages to different destinations. support is included in the package for writing log messages to files, http get/post locations, email via smtp, generic sockets, queues, or os-specific logging mechanisms such as syslog or the windows nt event log. destinations are served by _handler_ classes. you can create your own log destination class if you have special requirements not met by any of the built-in handler classes. by default, no destination is",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 5
        }
    },
    {
        "page_content": "special requirements not met by any of the built-in handler classes. by default, no destination is set for any logging messages. you can specify a destination (such as console or file) by using basicconfig() as in the tutorial examples. if you call the functions debug(), info(), warning(), error() and critical(), they will check to see if no destination is set; and if one is not set, they will set a destination of the console ( sys.stderr ) and a default format for the displayed message before delegating to the root logger to do the actual message output. the default format set by basicconfig() for messages is: severity:logger name:message you can change this by passing a format string to basicconfig() with the _format_ keyword argument. for all options regarding how a format string is constructed, see formatter-objects.",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 5
        }
    },
    {
        "page_content": "**2.1 logging flow** the flow of log event information in loggers and handlers is illustrated in the following diagram. **6**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 5
        }
    },
    {
        "page_content": "**2.2 loggers",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 6
        }
    },
    {
        "page_content": "** logger objects have a threefold job. first, they expose several methods to application code so that applications can log messages at runtime. second, logger objects determine which log messages to act upon based upon severity (the default filtering facility) or filter objects. third, logger objects pass along relevant log messages to all interested log handlers. the most widely used methods on logger objects fall into two categories: configuration and message sending. these are the most common configuration methods: - logger.setlevel() specifies the lowest-severity log message a logger will handle, where debug is the lowest built-in severity level and critical is the highest built-in severity. for example, if the severity level is info, the logger will handle only info, warning, error, and critical messages and will ignore debug messages. - logger.addhandler() and logger.removehandler() add and remove handler objects from the logger object. handlers are covered in more detail in",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 6
        }
    },
    {
        "page_content": "add and remove handler objects from the logger object. handlers are covered in more detail in _handlers_ . - logger.addfilter() and logger.removefilter() add and remove filter objects from the logger ob",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 6
        }
    },
    {
        "page_content": "**7**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 6
        }
    },
    {
        "page_content": "ject. filters are covered in more detail in filter. you dont need to always call these methods on every logger you create. see the last two paragraphs in this section. with the logger object configured, the following methods create log messages: - logger.debug(), logger.info(), logger.warning(), logger.error(), and logger. critical() all create log records with a message and a level that corresponds to their respective method names. the message is actually a format string, which may contain the standard string substitution syntax of %s, %d, %f, and so on. the rest of their arguments is a list of objects that correspond with the substitution fields in the message. with regard to",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 7
        }
    },
    {
        "page_content": "**kwargs, the logging methods care only about a keyword of exc_info and use it to determine whether to log exception information. - logger.exception() creates a log message similar to logger.error() . the difference is that logger. exception() dumps a stack trace along with it. call this method only from an exception handler. - logger.log() takes a log level as an explicit argument. this is a little more verbose for logging messages than using the log level convenience methods listed above, but this is how to log at custom log levels. getlogger() returns a reference to a logger instance with the specified name if it is provided, or root if not. the names are period-separated hierarchical structures. multiple calls to getlogger() with the same name will return a reference to the same logger object. loggers that are further down in the hierarchical list are children of loggers higher up in the list. for example, given a logger with a name of foo, loggers with names of foo.bar,",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 7
        }
    },
    {
        "page_content": "up in the list. for example, given a logger with a name of foo, loggers with names of foo.bar, foo.bar.baz, and foo.bam are all descendants of foo . loggers have a concept of _effective level_ . if a level is not explicitly set on a logger, the level of its parent is used instead as its effective level. if the parent has no explicit level set, _its_ parent is examined, and so on - all ancestors are searched until an explicitly set level is found. the root logger always has an explicit level set ( warning by default). when deciding whether to process an event, the effective level of the logger is used to determine whether the event is passed to the loggers handlers. child loggers propagate messages up to the handlers associated with their ancestor loggers. because of this, it is unnecessary to define and configure handlers for all the loggers an application uses. it is sufficient to configure handlers for a top-level logger and create child loggers as needed. (you can, however, turn",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 7
        }
    },
    {
        "page_content": "handlers for a top-level logger and create child loggers as needed. (you can, however, turn off propagation by setting the _propagate_ attribute of a logger to false .)",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 7
        }
    },
    {
        "page_content": "**2.3 handlers",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 7
        }
    },
    {
        "page_content": "** handler objects are responsible for dispatching the appropriate log messages (based on the log messages severity) to the handlers specified destination. logger objects can add zero or more handler objects to themselves with an addhandler() method. as an example scenario, an application may want to send all log messages to a log file, all log messages of error or higher to stdout, and all messages of critical to an email address. this scenario requires three individual handlers where each handler is responsible for sending messages of a specific severity to a specific location. the standard library includes quite a few handler types (see _useful handlers_ ); the tutorials use mainly streamhandler and filehandler in its examples. there are very few methods in a handler for application developers to concern themselves with. the only handler methods that seem relevant for application developers who are using the built-in handler objects (that is, not creating custom handlers) are the",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 7
        }
    },
    {
        "page_content": "who are using the built-in handler objects (that is, not creating custom handlers) are the following configuration methods: - the setlevel() method, just as in logger objects, specifies the lowest severity that will be dispatched to the appropriate destination. why are there two setlevel() methods? the level set in the logger determines which severity of messages it will pass to its handlers. the level set in each handler determines which messages that handler will send on. - setformatter() selects a formatter object for this handler to use. - addfilter() and removefilter() respectively configure and deconfigure filter objects on handlers. application code should not directly instantiate and use instances of handler . instead, the handler class is a base class that defines the interface that all handlers should have and establishes some default behavior that child classes can use (or override).",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 7
        }
    },
    {
        "page_content": "**8**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 7
        }
    },
    {
        "page_content": "**2.4 formatters** formatter objects configure the final order, structure, and contents of the log message. unlike the base logging. handler class, application code may instantiate formatter classes, although you could likely subclass the formatter if your application needs special behavior. the constructor takes three optional arguments a message format string, a date format string and a style indicator. logging.formatter. **__init__",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 8
        }
    },
    {
        "page_content": "** ( _fmt=none_, _datefmt=none_, _style=%_ ) if there is no message format string, the default is to use the raw message. if there is no date format string, the default date format is: %y-%m-%d %h:%m:%s with the milliseconds tacked on at the end. the style is one of '%', '{', or '$' . if one of these is not specified, then '%' will be used. if the style is '%', the message format string uses %(<dictionary key>)s styled string substitution; the possible keys are documented in logrecord-attributes. if the style is '{', the message format string is assumed to be compatible with str.format() (using keyword arguments), while if the style is '$' then the message format string should conform to what is expected by string.template.substitute() . changed in version 3.2: added the style parameter. the following message format string will log the time in a human-readable format, the severity of the message, and the contents of the message, in that order: ' _%(asctime)s_ - _%(levelname)s_ -",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 8
        }
    },
    {
        "page_content": "of the message, and the contents of the message, in that order: ' _%(asctime)s_ - _%(levelname)s_ - _%(message)s_ ' formatters use a user-configurable function to convert the creation time of a record to a tuple. by default, time. localtime() is used; to change this for a particular formatter instance, set the converter attribute of the instance to a function with the same signature as time.localtime() or time.gmtime() . to change it for all formatters, for example if you want all logging times to be shown in gmt, set the converter attribute in the formatter class (to time.gmtime for gmt display).",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 8
        }
    },
    {
        "page_content": "**2.5 configuring logging** programmers can configure logging in three ways: 1. creating loggers, handlers, and formatters explicitly using python code that calls the configuration methods listed above. 2. creating a logging config file and reading it using the fileconfig() function. 3. creating a dictionary of configuration information and passing it to the dictconfig() function. for the reference documentation on the last two options, see logging-config-api. the following example configures a very simple logger, a console handler, and a simple formatter using python code: (continues on next page) **9**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 8
        }
    },
    {
        "page_content": "(continued from previous page) running this module from the command line produces the following output: the following python module creates a logger, handler, and formatter nearly identical to those in the example listed above, with the only difference being the names of the objects: here is the logging.conf file: (continues on next page) **10**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 9
        }
    },
    {
        "page_content": "(continued from previous page) the output is nearly identical to that of the non-config-file-based example: you can see that the config file approach has a few advantages over the python code approach, mainly separation of configuration and code and the ability of noncoders to easily modify the logging properties. note that the class names referenced in config files need to be either relative to the logging module, or absolute values which can be resolved using normal import mechanisms. thus, you could use either watchedfilehandler (relative to the logging module) or mypackage.mymodule.myhandler (for a class defined in package mypackage and module mymodule, where mypackage is available on the python import path). in python 3.2, a new means of configuring logging has been introduced, using dictionaries to hold configuration information. this provides a superset of the functionality of the config-file-based approach outlined above, and is the recommended configuration method for new",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 10
        }
    },
    {
        "page_content": "the config-file-based approach outlined above, and is the recommended configuration method for new applications and deployments. because a python dictionary is used to hold configuration information, and since you can populate that dictionary using different means, you have more options for configuration. for example, you can use a configuration file in json format, or, if you have access to yaml processing functionality, a file in yaml format, to populate the configuration dictionary. or, of course, you can construct the dictionary in python code, receive it in pickled form over a socket, or use whatever approach makes sense for your application. heres an example of the same configuration as above, in yaml format for the new dictionary-based approach: (continues on next page)",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 10
        }
    },
    {
        "page_content": "**11**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 10
        }
    },
    {
        "page_content": "(continued from previous page) for more information about logging using a dictionary, see logging-config-api. **2.6 what happens if no configuration is provided",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 11
        }
    },
    {
        "page_content": "** if no logging configuration is provided, it is possible to have a situation where a logging event needs to be output, but no handlers can be found to output the event. the event is output using a handler of last resort, stored in lastresort . this internal handler is not associated with any logger, and acts like a streamhandler which writes the event description message to the current value of sys.stderr (therefore respecting any redirections which may be in effect). no formatting is done on the message - just the bare event description message is printed. the handlers level is set to warning, so all events at this and greater severities will be output. changed in version 3.2: for versions of python prior to 3.2, the behaviour is as follows: - if raiseexceptions is false (production mode), the event is silently dropped. - if raiseexceptions is true (development mode), a message no handlers could be found for logger x.y.z is printed once. to obtain the pre-3.2 behaviour, lastresort",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 11
        }
    },
    {
        "page_content": "could be found for logger x.y.z is printed once. to obtain the pre-3.2 behaviour, lastresort can be set to none .",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 11
        }
    },
    {
        "page_content": "**2.7 configuring logging for a library",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 11
        }
    },
    {
        "page_content": "** when developing a library which uses logging, you should take care to document how the library uses logging for example, the names of loggers used. some consideration also needs to be given to its logging configuration. if the using application does not use logging, and library code makes logging calls, then (as described in the previous section) events of severity warning and greater will be printed to sys.stderr . this is regarded as the best default behaviour. if for some reason you _dont_ want these messages printed in the absence of any logging configuration, you can attach a do-nothing handler to the top-level logger for your library. this avoids the message being printed, since a handler will always be found for the librarys events: it just doesnt produce any output. if the library user configures logging for application use, presumably that configuration will add some handlers, and if levels are suitably configured then logging calls made in library code will send output to",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 11
        }
    },
    {
        "page_content": "and if levels are suitably configured then logging calls made in library code will send output to those handlers, as normal. a do-nothing handler is included in the logging package: nullhandler (since python 3.1). an instance of this handler could be added to the top-level logger of the logging namespace used by the library ( _if_ you want to prevent your librarys logged events being output to sys.stderr in the absence of logging configuration). if all logging by a library _foo_ is done using loggers with names matching foo.x, foo.x.y, etc. then the code:",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 11
        }
    },
    {
        "page_content": "**12**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 11
        }
    },
    {
        "page_content": "should have the desired effect. if an organisation produces a number of libraries, then the logger name specified can be orgname.foo rather than just foo. #",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 12
        }
    },
    {
        "page_content": "# **3 logging levels",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 12
        }
    },
    {
        "page_content": "** the numeric values of logging levels are given in the following table. these are primarily of interest if you want to define your own levels, and need them to have specific values relative to the predefined levels. if you define a level with the same numeric value, it overwrites the predefined value; the predefined name is lost. levels can also be associated with loggers, being set either by the developer or through loading a saved logging configuration. when a logging method is called on a logger, the logger compares its own level with the level associated with the method call. if the loggers level is higher than the method calls, no logging message is actually generated. this is the basic mechanism controlling the verbosity of logging output. logging messages are encoded as instances of the logrecord class. when a logger decides to actually log an event, a logrecord instance is created from the logging message. logging messages are subjected to a dispatch mechanism through the use",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 12
        }
    },
    {
        "page_content": "from the logging message. logging messages are subjected to a dispatch mechanism through the use of _handlers_, which are instances of subclasses of the handler class. handlers are responsible for ensuring that a logged message (in the form of a logrecord ) ends up in a particular location (or set of locations) which is useful for the target audience for that message (such as end users, support desk staff, system administrators, developers). handlers are passed logrecord instances intended for particular destinations. each logger can have zero, one or more handlers associated with it (via the addhandler() method of logger ). in addition to any handlers directly associated with a logger, _all handlers_ _associated with all ancestors of the logger_ are called to dispatch the message (unless the _propagate_ flag for a logger is set to a false value, at which point the passing to ancestor handlers stops). just as for loggers, handlers can have levels associated with them. a handlers level",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 12
        }
    },
    {
        "page_content": "stops). just as for loggers, handlers can have levels associated with them. a handlers level acts as a filter in the same way as a loggers level does. if a handler decides to actually dispatch an event, the emit() method is used to send the message to its destination. most user-defined subclasses of handler will need to override this emit() .",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 12
        }
    },
    {
        "page_content": "**13**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 12
        }
    },
    {
        "page_content": "**3.1 custom levels** defining your own levels is possible, but should not be necessary, as the existing levels have been chosen on the basis of practical experience. however, if you are convinced that you need custom levels, great care should be exercised when doing this, and it is possibly _a very bad idea to define custom levels if you are developing a library_ . thats because if multiple library authors all define their own custom levels, there is a chance that the logging output from such multiple libraries used together will be difficult for the using developer to control and/or interpret, because a given numeric value might mean different things for different libraries. #",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 13
        }
    },
    {
        "page_content": "# **4 useful handlers",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 13
        }
    },
    {
        "page_content": "** in addition to the base handler class, many useful subclasses are provided: 1. streamhandler instances send messages to streams (file-like objects). 2. filehandler instances send messages to disk files. 3. baserotatinghandler is the base class for handlers that rotate log files at a certain point. it is not meant to be instantiated directly. instead, use rotatingfilehandler or timedrotatingfilehandler . 4. rotatingfilehandler instances send messages to disk files, with support for maximum log file sizes and log file rotation. 5. timedrotatingfilehandler instances send messages to disk files, rotating the log file at certain timed intervals. 6. sockethandler instances send messages to tcp/ip sockets. since 3.4, unix domain sockets are also supported. 7. datagramhandler instances send messages to udp sockets. since 3.4, unix domain sockets are also supported. 8. smtphandler instances send messages to a designated email address. 9. sysloghandler instances send messages to a unix syslog",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 13
        }
    },
    {
        "page_content": "messages to a designated email address. 9. sysloghandler instances send messages to a unix syslog daemon, possibly on a remote machine. 10. nteventloghandler instances send messages to a windows nt/2000/xp event log. 11. memoryhandler instances send messages to a buffer in memory, which is flushed whenever specific criteria are met. 12. httphandler instances send messages to an http server using either get or post semantics. 13. watchedfilehandler instances watch the file they are logging to. if the file changes, it is closed and reopened using the file name. this handler is only useful on unix-like systems; windows does not support the underlying mechanism used. 14. queuehandler instances send messages to a queue, such as those implemented in the queue or multiprocessing modules. 15. nullhandler instances do nothing with error messages. they are used by library developers who want to use logging, but want to avoid the no handlers could be found for logger _xxx_ message which can be",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 13
        }
    },
    {
        "page_content": "use logging, but want to avoid the no handlers could be found for logger _xxx_ message which can be displayed if the library user has not configured logging. see _configuring logging for a library_ for more information. added in version 3.1: the nullhandler class. added in version 3.2: the queuehandler class. the nullhandler, streamhandler and filehandler classes are defined in the core logging package. the other handlers are defined in a sub-module, logging.handlers . (there is also another sub-module, logging.config, for configuration functionality.) logged messages are formatted for presentation through instances of the formatter class. they are initialized with a format string suitable for use with the % operator and a dictionary. for formatting multiple messages in a batch, instances of bufferingformatter can be used. in addition to the format string (which is applied to each message in the batch), there is provision for header and trailer format strings.",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 13
        }
    },
    {
        "page_content": "**14**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 13
        }
    },
    {
        "page_content": "when filtering based on logger level and/or handler level is not enough, instances of filter can be added to both logger and handler instances (through their addfilter() method). before deciding to process a message further, both loggers and handlers consult all their filters for permission. if any filter returns a false value, the message is not processed further. the basic filter functionality allows filtering by specific logger name. if this feature is used, messages sent to the named logger and its children are allowed through the filter, and all others dropped. #",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 14
        }
    },
    {
        "page_content": "## **5 exceptions raised during logging** the logging package is designed to swallow exceptions which occur while logging in production. this is so that errors which occur while handling logging events - such as logging misconfiguration, network or other similar errors - do not cause the application using logging to terminate prematurely. systemexit and keyboardinterrupt exceptions are never swallowed. other exceptions which occur during the emit() method of a handler subclass are passed to its handleerror() method. the default implementation of handleerror() in handler checks to see if a module-level variable, raiseexceptions, is set. if set, a traceback is printed to sys.stderr . if not set, the exception is swallowed. #",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 14
        }
    },
    {
        "page_content": "## **6 using arbitrary objects as messages** in the preceding sections and examples, it has been assumed that the message passed when logging the event is a string. however, this is not the only possibility. you can pass an arbitrary object as a message, and its __str__() method will be called when the logging system needs to convert it to a string representation. in fact, if you want to, you can avoid computing a string representation altogether - for example, the sockethandler emits an event by pickling it and sending it over the wire. #",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 14
        }
    },
    {
        "page_content": "## **7 optimization** formatting of message arguments is deferred until it cannot be avoided. however, computing the arguments passed to the logging method can also be expensive, and you may want to avoid doing it if the logger will just throw away your event. to decide what to do, you can call the isenabledfor() method which takes a level argument and returns true if the event would be created by the logger for that level of call. you can write code like this: so that if the loggers threshold is set above debug, the calls to expensive_func1 and expensive_func2 are never made. **15**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 14
        }
    },
    {
        "page_content": "there are other optimizations which can be made for specific applications which need more precise control over what logging information is collected. heres a list of things you can do to avoid processing during logging which you dont need: also note that the core logging module only includes the basic handlers. if you dont import logging.handlers and logging.config, they wont take up any memory. ## **8 other resources** **16**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 15
        }
    },
    {
        "page_content": "## **index** non-alphabetical __init__() ( _logging.logging.formatter method_ ), 9 ## r rfc rfc 3339, 5 **17**",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 16
        }
    }
]