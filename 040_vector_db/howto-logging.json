[
    {
        "page_content": "# **Logging HOWTO**\n\n_**Release 3.13.3**_\n## **Guido van Rossum and the Python development team**\n\n**April 27, 2025**\n\n**Python Software Foundation**\n**Email: docs@python.org**\n## **Contents**\n\n**1** **Basic Logging Tutorial** **2**\n1.1 When to use logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\n1.2 A simple example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n1.3 Logging to a file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3\n1.4 Logging variable data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n1.5 Changing the format of displayed messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n1.6 Displaying the date/time in messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n1.7 Next Steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\n\n**2** **Advanced Logging Tutorial** **5**\n2.1 Logging Flow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\n2.2 Loggers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7\n2.3 Handlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n\n2.4 Formatters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n2.5 Configuring Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9\n2.6 What happens if no configuration is provided . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n2.7 Configuring Logging for a Library . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n\n**3** **Logging Levels** **13**\n3.1 Custom Levels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14\n\n**4** **Useful Handlers** **14**\n\n**5** **Exceptions raised during logging** **15**\n\n**6** **Using arbitrary objects as messages** **15**\n\n**7** **Optimization** **15**\n\n**8** **Other resources** **16**\n\n**Index** **17**\n\n**Author**\n\nVinay Sajip <vinay_sajip at red-dove dot com>\n\n**1**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 0
        }
    },
    {
        "page_content": "This page contains tutorial information. For links to reference information and a logging cookbook, please see _Other_\n\n_resources_ .\n## **1 Basic Logging Tutorial**\n\nLogging is a means of tracking events that happen when some software runs. The software’s developer adds logging\ncalls to their code to indicate that certain events have occurred. An event is described by a descriptive message which\ncan optionally contain variable data (i.e. data that is potentially different for each occurrence of the event). Events\nalso have an importance which the developer ascribes to the event; the importance can also be called the _level_ or\n_severity_ .\n\n**1.1 When to use logging**\n\nYou can access logging functionality by creating a logger via logger = getLogger(__name__), and then calling\nthe logger’s debug(), info(), warning(), error() and critical() methods. To determine when to use\nlogging, and to see which logger methods to use when, see the table below. It states, for each of a set of common\ntasks, the best tool to use for that task.\n\n\n\n\n\n\n\n\n\n\nThe logger methods are named after the level or severity of the events they are used to track. The standard levels and\ntheir applicability are described below (in increasing order of severity):\n\n|Level|When it’s used|\n|---|---|\n|DEBUG<br>INFO<br>WARNING<br>ERROR<br>CRITICAL|Detailed information, typically of interest only when diagnosing problems.<br>Confri mation that things are working as expected.<br>An indication that something unexpected happened, or indicative of some problem in the near<br>future (e.g. ‘disk space low’). The software is still working as expected.<br>Due to a more serious problem, the software has not been able to perform some function.<br>A serious error, indicating that the program itself may be unable to continue running.|\n\n\n\nThe default level is WARNING, which means that only events of this severity and higher will be tracked, unless the\nlogging package is configured to do otherwise.\n\nEvents that are tracked can be handled in different ways. The simplest way of handling tracked events is to print them\nto the console. Another common way is to write them to a disk file.\n\n**2**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 1
        }
    },
    {
        "page_content": "**1.2 A simple example**\n\nA very simple example is:\n\n\n\nIf you type these lines into a script and run it, you’ll see:\n\nWARNING:root:Watch out!\n\nprinted out on the console. The INFO message doesn’t appear because the default level is WARNING . The printed\nmessage includes the indication of the level and the description of the event provided in the logging call, i.e. ‘Watch\nout!’. The actual output can be formatted quite flexibly if you need that; formatting options will also be explained\nlater.\n\nNotice that in this example, we use functions directly on the logging module, like logging.debug, rather than\ncreating a logger and calling functions on it. These functions operation on the root logger, but can be useful as they\nwill call basicConfig() for you if it has not been called yet, like in this example. In larger programs you’ll usually\nwant to control the logging configuration explicitly however - so for that reason as well as others, it’s better to create\nloggers and call their methods.\n\n**1.3 Logging to a file**\n\nA very common situation is that of recording logging events in a file, so let’s look at that next. Be sure to try the\nfollowing in a newly started Python interpreter, and don’t just continue from the session described above:\n\n\n\nChanged in version 3.9: The _encoding_ argument was added. In earlier Python versions, or if not specified, the\nencoding used is the default value used by open() . While not shown in the above example, an _errors_ argument can\nalso now be passed, which determines how encoding errors are handled. For available values and the default, see the\ndocumentation for open() .\n\nAnd now if we open the file and look at what we have, we should find the log messages:\n\n\n\nThis example also shows how you can set the logging level which acts as the threshold for tracking. In this case,\nbecause we set the threshold to DEBUG, all of the messages were printed.\n\nIf you want to set the logging level from a command-line option such as:\n\n--log=INFO\n\nand you have the value of the parameter passed for --log in some variable _loglevel_, you can use:\n\ngetattr(logging, loglevel.upper())\n\nto get the value which you’ll pass to basicConfig() via the _level_ argument. You may want to error check any user\ninput value, perhaps as in the following example:\n\n**3**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 2
        }
    },
    {
        "page_content": "The call to basicConfig() should come _before_ any calls to a logger’s methods such as debug(), info(), etc.\nOtherwise, that logging event may not be handled in the desired manner.\n\nIf you run the above script several times, the messages from successive runs are appended to the file _example.log_ .\nIf you want each run to start afresh, not remembering the messages from earlier runs, you can specify the _filemode_\nargument, by changing the call in the above example to:\n\nlogging.basicConfig(filename='example.log', filemode='w', level=logging.DEBUG)\n\nThe output will be the same as before, but the log file is no longer appended to, so the messages from earlier runs are\nlost.\n\n**1.4 Logging variable data**\n\nTo log variable data, use a format string for the event description message and append the variable data as arguments.\nFor example:\n\n\n\nwill display:\n\nWARNING:root:Look before you leap!\n\nAs you can see, merging of variable data into the event description message uses the old, %-style of string formatting.\nThis is for backwards compatibility: the logging package pre-dates newer formatting options such as str.format()\nand string.Template . These newer formatting options _are_ supported, but exploring them is outside the scope of\nthis tutorial: see formatting-styles for more information.\n\n**1.5 Changing the format of displayed messages**\n\nTo change the format which is used to display messages, you need to specify the format you want to use:\n\n\n\nwhich would print:\n\n\n\nNotice that the ‘root’ which appeared in earlier examples has disappeared. For a full set of things that can appear\nin format strings, you can refer to the documentation for logrecord-attributes, but for simple usage, you just need\nthe _levelname_ (severity), _message_ (event description, including variable data) and perhaps to display when the event\noccurred. This is described in the next section.\n\n**4**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 3
        }
    },
    {
        "page_content": "**1.6 Displaying the date/time in messages**\n\nTo display the date and time of an event, you would place ‘%(asctime)s’ in your format string:\n\n\n\nwhich should print something like this:\n\n2010-12-12 11:41:42,612 is when this event was logged.\n\nThe default format for date/time display (shown above) is like ISO8601 or **[RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339.html)** . If you need more control over\nthe formatting of the date/time, provide a _datefmt_ argument to basicConfig, as in this example:\n\nwhich would display something like this:\n\n12/12/2010 11:46:36 AM is when this event was logged.\n\nThe format of the _datefmt_ argument is the same as supported by time.strftime() .\n\n**1.7 Next Steps**\n\nThat concludes the basic tutorial. It should be enough to get you up and running with logging. There’s a lot more that\nthe logging package offers, but to get the best out of it, you’ll need to invest a little more of your time in reading the\nfollowing sections. If you’re ready for that, grab some of your favourite beverage and carry on.\n\nIf your logging needs are simple, then use the above examples to incorporate logging into your own scripts, and if\nyou run into problems or don’t understand something, please post a question on the comp.lang.python Usenet group\n[(available at https://groups.google.com/g/comp.lang.python) and you should receive help before too long.](https://groups.google.com/g/comp.lang.python)\n\nStill here? You can carry on reading the next few sections, which provide a slightly more advanced/in-depth tutorial\nthan the basic one above. After that, you can take a look at the logging-cookbook.\n## **2 Advanced Logging Tutorial**\n\nThe logging library takes a modular approach and offers several categories of components: loggers, handlers, filters,\nand formatters.\n\n  - Loggers expose the interface that application code directly uses.\n\n  - Handlers send the log records (created by loggers) to the appropriate destination.\n\n  - Filters provide a finer grained facility for determining which log records to output.\n\n  - Formatters specify the layout of log records in the final output.\n\nLog event information is passed between loggers, handlers, filters and formatters in a LogRecord instance.\n\nLogging is performed by calling methods on instances of the Logger class (hereafter called _loggers_ ). Each instance\nhas a name, and they are conceptually arranged in a namespace hierarchy using dots (periods) as separators. For\nexample, a logger named ‘scan’ is the parent of loggers ‘scan.text’, ‘scan.html’ and ‘scan.pdf’. Logger names can be\nanything you want, and indicate the area of an application in which a logged message originates.\n\nA good convention to use when naming loggers is to use a module-level logger, in each module which uses logging,\nnamed as follows:\n\n**5**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 4
        }
    },
    {
        "page_content": "logger = logging.getLogger(__name__)\n\nThis means that logger names track the package/module hierarchy, and it’s intuitively obvious where events are logged\njust from the logger name.\n\nThe root of the hierarchy of loggers is called the root logger. That’s the logger used by the functions debug(),\ninfo(), warning(), error() and critical(), which just call the same-named method of the root logger. The\nfunctions and the methods have the same signatures. The root logger’s name is printed as ‘root’ in the logged output.\n\nIt is, of course, possible to log messages to different destinations. Support is included in the package for writing\nlog messages to files, HTTP GET/POST locations, email via SMTP, generic sockets, queues, or OS-specific logging\nmechanisms such as syslog or the Windows NT event log. Destinations are served by _handler_ classes. You can create\nyour own log destination class if you have special requirements not met by any of the built-in handler classes.\n\nBy default, no destination is set for any logging messages. You can specify a destination (such as console or file)\nby using basicConfig() as in the tutorial examples. If you call the functions debug(), info(), warning(),\nerror() and critical(), they will check to see if no destination is set; and if one is not set, they will set a\ndestination of the console ( sys.stderr ) and a default format for the displayed message before delegating to the\nroot logger to do the actual message output.\n\nThe default format set by basicConfig() for messages is:\n\nseverity:logger name:message\n\nYou can change this by passing a format string to basicConfig() with the _format_ keyword argument. For all\noptions regarding how a format string is constructed, see formatter-objects.\n\n**2.1 Logging Flow**\n\nThe flow of log event information in loggers and handlers is illustrated in the following diagram.\n\n**6**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 5
        }
    },
    {
        "page_content": "**2.2 Loggers**\n\nLogger objects have a threefold job. First, they expose several methods to application code so that applications can\nlog messages at runtime. Second, logger objects determine which log messages to act upon based upon severity (the\ndefault filtering facility) or filter objects. Third, logger objects pass along relevant log messages to all interested log\nhandlers.\n\nThe most widely used methods on logger objects fall into two categories: configuration and message sending.\n\nThese are the most common configuration methods:\n\n  - Logger.setLevel() specifies the lowest-severity log message a logger will handle, where debug is the lowest\nbuilt-in severity level and critical is the highest built-in severity. For example, if the severity level is INFO,\nthe logger will handle only INFO, WARNING, ERROR, and CRITICAL messages and will ignore DEBUG\n\nmessages.\n\n  - Logger.addHandler() and Logger.removeHandler() add and remove handler objects from the logger\nobject. Handlers are covered in more detail in _Handlers_ .\n\n  - Logger.addFilter() and Logger.removeFilter() add and remove filter objects from the logger ob\n**7**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 6
        }
    },
    {
        "page_content": "ject. Filters are covered in more detail in filter.\n\nYou don’t need to always call these methods on every logger you create. See the last two paragraphs in this section.\n\nWith the logger object configured, the following methods create log messages:\n\n  - Logger.debug(), Logger.info(), Logger.warning(), Logger.error(), and Logger.\ncritical() all create log records with a message and a level that corresponds to their respective\nmethod names. The message is actually a format string, which may contain the standard string substitution\nsyntax of %s, %d, %f, and so on. The rest of their arguments is a list of objects that correspond with the\nsubstitution fields in the message. With regard to **kwargs, the logging methods care only about a keyword\nof exc_info and use it to determine whether to log exception information.\n\n  - Logger.exception() creates a log message similar to Logger.error() . The difference is that Logger.\nexception() dumps a stack trace along with it. Call this method only from an exception handler.\n\n  - Logger.log() takes a log level as an explicit argument. This is a little more verbose for logging messages\nthan using the log level convenience methods listed above, but this is how to log at custom log levels.\n\ngetLogger() returns a reference to a logger instance with the specified name if it is provided, or root if not.\nThe names are period-separated hierarchical structures. Multiple calls to getLogger() with the same name will\nreturn a reference to the same logger object. Loggers that are further down in the hierarchical list are children of\nloggers higher up in the list. For example, given a logger with a name of foo, loggers with names of foo.bar,\nfoo.bar.baz, and foo.bam are all descendants of foo .\n\nLoggers have a concept of _effective level_ . If a level is not explicitly set on a logger, the level of its parent is used\ninstead as its effective level. If the parent has no explicit level set, _its_ parent is examined, and so on - all ancestors are\nsearched until an explicitly set level is found. The root logger always has an explicit level set ( WARNING by default).\nWhen deciding whether to process an event, the effective level of the logger is used to determine whether the event\nis passed to the logger’s handlers.\n\nChild loggers propagate messages up to the handlers associated with their ancestor loggers. Because of this, it is\nunnecessary to define and configure handlers for all the loggers an application uses. It is sufficient to configure\nhandlers for a top-level logger and create child loggers as needed. (You can, however, turn off propagation by setting\nthe _propagate_ attribute of a logger to False .)\n\n**2.3 Handlers**\n\nHandler objects are responsible for dispatching the appropriate log messages (based on the log messages’ severity)\nto the handler’s specified destination. Logger objects can add zero or more handler objects to themselves with an\naddHandler() method. As an example scenario, an application may want to send all log messages to a log file,\nall log messages of error or higher to stdout, and all messages of critical to an email address. This scenario requires\nthree individual handlers where each handler is responsible for sending messages of a specific severity to a specific\nlocation.\n\nThe standard library includes quite a few handler types (see _Useful Handlers_ ); the tutorials use mainly\nStreamHandler and FileHandler in its examples.\n\nThere are very few methods in a handler for application developers to concern themselves with. The only handler\nmethods that seem relevant for application developers who are using the built-in handler objects (that is, not creating\ncustom handlers) are the following configuration methods:\n\n  - The setLevel() method, just as in logger objects, specifies the lowest severity that will be dispatched to\nthe appropriate destination. Why are there two setLevel() methods? The level set in the logger determines\nwhich severity of messages it will pass to its handlers. The level set in each handler determines which messages\nthat handler will send on.\n\n  - setFormatter() selects a Formatter object for this handler to use.\n\n  - addFilter() and removeFilter() respectively configure and deconfigure filter objects on handlers.\n\nApplication code should not directly instantiate and use instances of Handler . Instead, the Handler class is a base\nclass that defines the interface that all handlers should have and establishes some default behavior that child classes\ncan use (or override).\n\n**8**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 7
        }
    },
    {
        "page_content": "**2.4 Formatters**\n\nFormatter objects configure the final order, structure, and contents of the log message. Unlike the base logging.\nHandler class, application code may instantiate formatter classes, although you could likely subclass the formatter\nif your application needs special behavior. The constructor takes three optional arguments – a message format string,\na date format string and a style indicator.\n\nlogging.Formatter. **__init__** ( _fmt=None_, _datefmt=None_, _style=’%’_ )\n\nIf there is no message format string, the default is to use the raw message. If there is no date format string, the default\ndate format is:\n\n%Y-%m-%d %H:%M:%S\n\nwith the milliseconds tacked on at the end. The style is one of '%', '{', or '$' . If one of these is not specified,\nthen '%' will be used.\n\nIf the style is '%', the message format string uses %(<dictionary key>)s styled string substitution; the possible\nkeys are documented in logrecord-attributes. If the style is '{', the message format string is assumed to be compatible\nwith str.format() (using keyword arguments), while if the style is '$' then the message format string should\nconform to what is expected by string.Template.substitute() .\n\nChanged in version 3.2: Added the style parameter.\n\nThe following message format string will log the time in a human-readable format, the severity of the message, and\nthe contents of the message, in that order:\n\n' _%(asctime)s_ - _%(levelname)s_ - _%(message)s_ '\n\nFormatters use a user-configurable function to convert the creation time of a record to a tuple. By default, time.\nlocaltime() is used; to change this for a particular formatter instance, set the converter attribute of the instance\nto a function with the same signature as time.localtime() or time.gmtime() . To change it for all formatters,\nfor example if you want all logging times to be shown in GMT, set the converter attribute in the Formatter class\n(to time.gmtime for GMT display).\n\n**2.5 Configuring Logging**\n\nProgrammers can configure logging in three ways:\n\n1. Creating loggers, handlers, and formatters explicitly using Python code that calls the configuration methods\nlisted above.\n\n2. Creating a logging config file and reading it using the fileConfig() function.\n\n3. Creating a dictionary of configuration information and passing it to the dictConfig() function.\n\nFor the reference documentation on the last two options, see logging-config-api. The following example configures a\nvery simple logger, a console handler, and a simple formatter using Python code:\n\n\n\n(continues on next page)\n\n\n**9**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 8
        }
    },
    {
        "page_content": "(continued from previous page)\n\n\n\nRunning this module from the command line produces the following output:\n\n\n\nThe following Python module creates a logger, handler, and formatter nearly identical to those in the example listed\nabove, with the only difference being the names of the objects:\n\n\n\n\nHere is the logging.conf file:\n\n\n\n\n(continues on next page)\n\n\n**10**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 9
        }
    },
    {
        "page_content": "(continued from previous page)\n\n\n\n\nThe output is nearly identical to that of the non-config-file-based example:\n\n\n\nYou can see that the config file approach has a few advantages over the Python code approach, mainly separation of\nconfiguration and code and the ability of noncoders to easily modify the logging properties.\n\n\n\nNote that the class names referenced in config files need to be either relative to the logging module, or absolute\nvalues which can be resolved using normal import mechanisms. Thus, you could use either WatchedFileHandler\n(relative to the logging module) or mypackage.mymodule.MyHandler (for a class defined in package mypackage\nand module mymodule, where mypackage is available on the Python import path).\n\nIn Python 3.2, a new means of configuring logging has been introduced, using dictionaries to hold configuration\ninformation. This provides a superset of the functionality of the config-file-based approach outlined above, and is\nthe recommended configuration method for new applications and deployments. Because a Python dictionary is used\nto hold configuration information, and since you can populate that dictionary using different means, you have more\noptions for configuration. For example, you can use a configuration file in JSON format, or, if you have access to\nYAML processing functionality, a file in YAML format, to populate the configuration dictionary. Or, of course, you\ncan construct the dictionary in Python code, receive it in pickled form over a socket, or use whatever approach makes\nsense for your application.\n\nHere’s an example of the same configuration as above, in YAML format for the new dictionary-based approach:\n\n\n\n(continues on next page)\n\n\n**11**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 10
        }
    },
    {
        "page_content": "(continued from previous page)\n\n\n\nFor more information about logging using a dictionary, see logging-config-api.\n\n**2.6 What happens if no configuration is provided**\n\nIf no logging configuration is provided, it is possible to have a situation where a logging event needs to be output, but\nno handlers can be found to output the event.\n\nThe event is output using a ‘handler of last resort’, stored in lastResort . This internal handler is not associated\nwith any logger, and acts like a StreamHandler which writes the event description message to the current value of\nsys.stderr (therefore respecting any redirections which may be in effect). No formatting is done on the message\n\n- just the bare event description message is printed. The handler’s level is set to WARNING, so all events at this and\ngreater severities will be output.\n\nChanged in version 3.2: For versions of Python prior to 3.2, the behaviour is as follows:\n\n  - If raiseExceptions is False (production mode), the event is silently dropped.\n\n  - If raiseExceptions is True (development mode), a message ‘No handlers could be found for logger X.Y.Z’\nis printed once.\n\nTo obtain the pre-3.2 behaviour, lastResort can be set to None .\n\n**2.7 Configuring Logging for a Library**\n\nWhen developing a library which uses logging, you should take care to document how the library uses logging for example, the names of loggers used. Some consideration also needs to be given to its logging configuration. If\nthe using application does not use logging, and library code makes logging calls, then (as described in the previous\nsection) events of severity WARNING and greater will be printed to sys.stderr . This is regarded as the best default\nbehaviour.\n\nIf for some reason you _don’t_ want these messages printed in the absence of any logging configuration, you can attach\na do-nothing handler to the top-level logger for your library. This avoids the message being printed, since a handler\nwill always be found for the library’s events: it just doesn’t produce any output. If the library user configures logging\nfor application use, presumably that configuration will add some handlers, and if levels are suitably configured then\nlogging calls made in library code will send output to those handlers, as normal.\n\nA do-nothing handler is included in the logging package: NullHandler (since Python 3.1). An instance of this\nhandler could be added to the top-level logger of the logging namespace used by the library ( _if_ you want to prevent\nyour library’s logged events being output to sys.stderr in the absence of logging configuration). If all logging by\na library _foo_ is done using loggers with names matching ‘foo.x’, ‘foo.x.y’, etc. then the code:\n\n\n\n**12**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 11
        }
    },
    {
        "page_content": "should have the desired effect. If an organisation produces a number of libraries, then the logger name specified can\nbe ‘orgname.foo’ rather than just ‘foo’.\n\n\n## **3 Logging Levels**\n\nThe numeric values of logging levels are given in the following table. These are primarily of interest if you want to\ndefine your own levels, and need them to have specific values relative to the predefined levels. If you define a level\nwith the same numeric value, it overwrites the predefined value; the predefined name is lost.\n\nLevels can also be associated with loggers, being set either by the developer or through loading a saved logging\nconfiguration. When a logging method is called on a logger, the logger compares its own level with the level associated\nwith the method call. If the logger’s level is higher than the method call’s, no logging message is actually generated.\nThis is the basic mechanism controlling the verbosity of logging output.\n\nLogging messages are encoded as instances of the LogRecord class. When a logger decides to actually log an event,\na LogRecord instance is created from the logging message.\n\nLogging messages are subjected to a dispatch mechanism through the use of _handlers_, which are instances of\nsubclasses of the Handler class. Handlers are responsible for ensuring that a logged message (in the form of a\nLogRecord ) ends up in a particular location (or set of locations) which is useful for the target audience for that\nmessage (such as end users, support desk staff, system administrators, developers). Handlers are passed LogRecord\ninstances intended for particular destinations. Each logger can have zero, one or more handlers associated with it (via\nthe addHandler() method of Logger ). In addition to any handlers directly associated with a logger, _all handlers_\n_associated with all ancestors of the logger_ are called to dispatch the message (unless the _propagate_ flag for a logger is\nset to a false value, at which point the passing to ancestor handlers stops).\n\nJust as for loggers, handlers can have levels associated with them. A handler’s level acts as a filter in the same way\nas a logger’s level does. If a handler decides to actually dispatch an event, the emit() method is used to send the\nmessage to its destination. Most user-defined subclasses of Handler will need to override this emit() .\n\n**13**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 12
        }
    },
    {
        "page_content": "**3.1 Custom Levels**\n\nDefining your own levels is possible, but should not be necessary, as the existing levels have been chosen on the basis\nof practical experience. However, if you are convinced that you need custom levels, great care should be exercised\nwhen doing this, and it is possibly _a very bad idea to define custom levels if you are developing a library_ . That’s\nbecause if multiple library authors all define their own custom levels, there is a chance that the logging output from\nsuch multiple libraries used together will be difficult for the using developer to control and/or interpret, because a\ngiven numeric value might mean different things for different libraries.\n## **4 Useful Handlers**\n\nIn addition to the base Handler class, many useful subclasses are provided:\n\n1. StreamHandler instances send messages to streams (file-like objects).\n\n2. FileHandler instances send messages to disk files.\n\n3. BaseRotatingHandler is the base class for handlers that rotate log files at a certain point. It is not meant\nto be instantiated directly. Instead, use RotatingFileHandler or TimedRotatingFileHandler .\n\n4. RotatingFileHandler instances send messages to disk files, with support for maximum log file sizes and\nlog file rotation.\n\n5. TimedRotatingFileHandler instances send messages to disk files, rotating the log file at certain timed\nintervals.\n\n6. SocketHandler instances send messages to TCP/IP sockets. Since 3.4, Unix domain sockets are also supported.\n\n7. DatagramHandler instances send messages to UDP sockets. Since 3.4, Unix domain sockets are also supported.\n\n8. SMTPHandler instances send messages to a designated email address.\n\n9. SysLogHandler instances send messages to a Unix syslog daemon, possibly on a remote machine.\n\n10. NTEventLogHandler instances send messages to a Windows NT/2000/XP event log.\n\n11. MemoryHandler instances send messages to a buffer in memory, which is flushed whenever specific criteria\n\nare met.\n\n12. HTTPHandler instances send messages to an HTTP server using either GET or POST semantics.\n\n13. WatchedFileHandler instances watch the file they are logging to. If the file changes, it is closed and reopened using the file name. This handler is only useful on Unix-like systems; Windows does not support the\nunderlying mechanism used.\n\n14. QueueHandler instances send messages to a queue, such as those implemented in the queue or\nmultiprocessing modules.\n\n15. NullHandler instances do nothing with error messages. They are used by library developers who want to use\nlogging, but want to avoid the ‘No handlers could be found for logger _XXX_ ’ message which can be displayed if\nthe library user has not configured logging. See _Configuring Logging for a Library_ for more information.\n\nAdded in version 3.1: The NullHandler class.\n\nAdded in version 3.2: The QueueHandler class.\n\nThe NullHandler, StreamHandler and FileHandler classes are defined in the core logging package. The other\nhandlers are defined in a sub-module, logging.handlers . (There is also another sub-module, logging.config,\nfor configuration functionality.)\n\nLogged messages are formatted for presentation through instances of the Formatter class. They are initialized with\na format string suitable for use with the % operator and a dictionary.\n\nFor formatting multiple messages in a batch, instances of BufferingFormatter can be used. In addition to the\nformat string (which is applied to each message in the batch), there is provision for header and trailer format strings.\n\n**14**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 13
        }
    },
    {
        "page_content": "When filtering based on logger level and/or handler level is not enough, instances of Filter can be added to both\nLogger and Handler instances (through their addFilter() method). Before deciding to process a message further, both loggers and handlers consult all their filters for permission. If any filter returns a false value, the message\nis not processed further.\n\nThe basic Filter functionality allows filtering by specific logger name. If this feature is used, messages sent to the\nnamed logger and its children are allowed through the filter, and all others dropped.\n## **5 Exceptions raised during logging**\n\nThe logging package is designed to swallow exceptions which occur while logging in production. This is so that errors\nwhich occur while handling logging events - such as logging misconfiguration, network or other similar errors - do\nnot cause the application using logging to terminate prematurely.\n\nSystemExit and KeyboardInterrupt exceptions are never swallowed. Other exceptions which occur during the\nemit() method of a Handler subclass are passed to its handleError() method.\n\nThe default implementation of handleError() in Handler checks to see if a module-level variable,\nraiseExceptions, is set. If set, a traceback is printed to sys.stderr . If not set, the exception is swallowed.\n## **6 Using arbitrary objects as messages**\n\nIn the preceding sections and examples, it has been assumed that the message passed when logging the event is a\nstring. However, this is not the only possibility. You can pass an arbitrary object as a message, and its __str__()\nmethod will be called when the logging system needs to convert it to a string representation. In fact, if you want to,\nyou can avoid computing a string representation altogether - for example, the SocketHandler emits an event by\npickling it and sending it over the wire.\n## **7 Optimization**\n\nFormatting of message arguments is deferred until it cannot be avoided. However, computing the arguments passed\nto the logging method can also be expensive, and you may want to avoid doing it if the logger will just throw away\nyour event. To decide what to do, you can call the isEnabledFor() method which takes a level argument and\nreturns true if the event would be created by the Logger for that level of call. You can write code like this:\n\n\n\nso that if the logger’s threshold is set above DEBUG, the calls to expensive_func1 and expensive_func2 are\nnever made.\n\n\n\n**15**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 14
        }
    },
    {
        "page_content": "There are other optimizations which can be made for specific applications which need more precise control over what\nlogging information is collected. Here’s a list of things you can do to avoid processing during logging which you don’t\nneed:\n\n\n\n\n\n\n\n\nAlso note that the core logging module only includes the basic handlers. If you don’t import logging.handlers\nand logging.config, they won’t take up any memory.\n## **8 Other resources**\n\n\n\n**16**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 15
        }
    },
    {
        "page_content": "## **Index** Non-alphabetical\n\n__init__() ( _logging.logging.Formatter method_ ), 9\n## R\n\nRFC\n\nRFC 3339, 5\n\n\n**17**\n\n",
        "metadata": {
            "producer": "xdvipdfmx (20220710)",
            "creator": "LaTeX with hyperref",
            "creationdate": "2025-04-27T12:51:19+00:00",
            "source": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "file_path": "c:\\Projects\\OnlineCourses\\GenerativeAIwithPython_Material\\040_vector_db\\10_DataLoader\\docs-pdf\\howto-logging.pdf",
            "total_pages": 17,
            "format": "PDF 1.5",
            "title": "Logging HOWTO",
            "author": "Guido van Rossum and the Python development team",
            "subject": "",
            "keywords": "",
            "moddate": "",
            "trapped": "",
            "modDate": "",
            "creationDate": "D:20250427125119-00'00'",
            "page": 16
        }
    }
]